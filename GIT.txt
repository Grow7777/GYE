COMANDOS GIT
https://github.com/Grow7777/apuntes_2023_11_02.git
-----------------------------------------------------------

CUANDO INSTALAS POR PRIMERA VES EN TU PC
(deberias haber creado tu repositorio en github)

  git init					(inciando repositorio .git en tu maquina local)
  git add  . 				(añadiendo archivos modificados)
  git commit -m "mi_primer_comentario"	(trakeando commit)
  git branch -M main   			cambian nombre la rama a "main" y  la establece como principal 
  git remote add origin https://github.com/Grow7777/apuntes_2023_11_02.git 		(subiendo repositorio principal a git) se usa unicamente para subir el repositorio
  git push -u origin main      			 (la -u, estás configurando la rama local para hacer un seguimiento dela rama remota, en futuros comandos git push o git pull, Git entenderá automáticamente hacia dónde enviar o desde dónde traer los cambios.



   (…or push an existing repository from the command line)
  git remote add origin https://github.com/Grow7777/apuntes_2023_11_02.git
  git branch -M main
  git push -u origin main
-------------------------------------------------------------------------------------

EN EL CASO QUE TE PIDA AUTENTIFICACION
(agregando o modificando usuario y correo)

> git config --global user.name "Tu Nuevo Nombre"
> git config --global user.email "tu@nuevoemail.com"
---------------------------------------------------------------------------------------

UNA VES QUE HAS CREADO TU REPOSITORIO 

SUBIR CAMBIOS

> git add [nombre_archivo_modificado]      	( git add .)
> git commit -m "mi segundo comentario"
> git push origin main
-------------------------------------------------------------------------------------------

BAJAR CAMBIOS
> git pull origin main
-------------------------------------------------------------------------------------------


PARA VER CONFIGURACION USARIOS EMAIL ETC
> git config --list

O TAMBIEN 
> git config user.name
> git config user.email
--------------------------------------------------------------------------------

AGREGAR EDITOR DE TEXTO  (en este caso visual code)
> git config --global core.editor "code --wait"   (wait es para que la terminal se quede esperando hasta que cerremos el editor de texto)

PARA VER CONFIGURACION GLOBAL
> git config --global -l
> git config --global -e     (se abre un archivo)
-----------------------------------------------------------------------------------------------

EXISTEN DOS O MAS DESARROLLADORES WINDOWS Y LINUX
window tiene CR (salto de linea) y LF
linux solo  LF
en el caso de windows tiene que eliminar cr al subir por eso tiene que estar en true
en el caso de linux tiene que estar en input para no dejar bajar codigo con cr 

> git config --global core.autocrlf true		(win)
> git config --global core.autocrlf input		(linux)
-------------------------------------------------------------------------------------------------

VER OPCIONES
> git config -h
---------------------------------------------------------------------------------------------------------

PAR ELIMINAR MAIL
> git config --global --unset user.emial
-------------------------------------------------------------

ELIMINAR CREDENCIALES
>git credential-manager-core erase
> git credential reject  (WINDOW)
------------------------------------------------------------------

VER ESTADO DE LOS ARCHIVOS MODIFICADOS
> git status 	(importante)
> git status -s
> git diff
------------------------------------------------------------------

PARA RESTAURAR UN ARCHIVO ELIMINADO
> git restore -- stage [nombre_archivo]      (volver al stage)
> git restore [nombre_archivo]	     (restaurar)   
----------------------------------------------------------------------------------------------------------

PARA COMITEAR DIRECTO
> git [comando] [opcion] [parametro]         
------------------------------------------------------------------------

PARA IGNORAR ARCHIVOS 
Por ejemplo si tienes conexion BD y existen archivos con contraseña que no se deberian subir al repositorio

Ejemplo se tiene el archivo .env donde se guardan usuario y contraseña para conexion bd
> se crea un archivo llamado .gitignore y adentro se colocan los nombres de los archivos que no tienen que indexar
> echo ".env" >> .gitignore
-------------------------------------------------------------------------------------------------------------

VER HISTORIAL
> git log
> git log --oneline
----------------------------------

PARA VER EL NOMBRE  DE MI REMOTO
> git remote -v			(en este caso se llama origin)
-------------------------------------------------------------

PARA VER EN QUE RAMA ESTOY
> git branch
> git status
-------------------------------------------------

PARA CREAR UNA RAMA
> git checkout -b [nombre_rama]
> git checkout -b features/[nombre_rama]  (opcional no recomendado por ahora)
---------------------------------------------------

PARA CAMBIAR  DE RAMA
> git checkout [nombre_rama]
------------------------------------------------------

PARA TRAER TODOS LOS CAMBIOS DE LA RAMA CREADA ALA RAMA MAIN
(rama actual "main")
> git merge [nombre_rama_creada]		(develop)
------------------------------------------------------

